"""
Project Manager utility for handling Flutter project file operations.
"""

import os
import subprocess
from typing import Dict, List, Optional
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

class ProjectManager:
    """
    Handles creation and management of Flutter projects on disk.
    """
    
    def __init__(self):
        self.output_dir = os.getenv('OUTPUT_DIR', './flutter_projects')
        self.flutter_sdk_path = os.getenv('FLUTTER_SDK_PATH', 'flutter')
        
        # Ensure output directory exists
        Path(self.output_dir).mkdir(parents=True, exist_ok=True)
    
    def get_project_path(self, project_name: str) -> str:
        """Get the full path for a project directory."""
        return os.path.join(self.output_dir, project_name)
    
    def project_exists(self, project_name: str) -> bool:
        """Check if a project directory already exists."""
        project_path = self.get_project_path(project_name)
        return os.path.exists(project_path) and os.path.isdir(project_path)
    
    def create_flutter_project_structure(self, project_name: str) -> str:
        """
        Create basic Flutter project structure using flutter create command.
        Returns the project path.
        """
        project_path = self.get_project_path(project_name)
        
        if self.project_exists(project_name):
            raise ValueError(f"Project '{project_name}' already exists at {project_path}")
        
        try:
            # Create Flutter project using flutter create command
            result = subprocess.run([
                self.flutter_sdk_path, 'create', 
                '--project-name', project_name.lower().replace('-', '_'),
                project_path
            ], capture_output=True, text=True, check=True)
            
            print(f"✅ Flutter project structure created at: {project_path}")
            return project_path
            
        except subprocess.CalledProcessError as e:
            # If flutter create fails, create basic directory structure manually
            print(f"⚠️  Flutter create failed, creating basic structure manually: {e}")
            return self._create_basic_structure(project_name)
        except FileNotFoundError:
            # Flutter SDK not found, create basic structure manually
            print("⚠️  Flutter SDK not found, creating basic structure manually")
            return self._create_basic_structure(project_name)
    
    def _create_basic_structure(self, project_name: str) -> str:
        """Create basic Flutter project structure manually."""
        project_path = self.get_project_path(project_name)
        
        # Create directory structure
        directories = [
            'lib',
            'test',
            'android/app/src/main/kotlin',
            'ios/Runner',
            'web',
            'linux',
            'macos',
            'windows'
        ]
        
        for directory in directories:
            Path(os.path.join(project_path, directory)).mkdir(parents=True, exist_ok=True)
        
        # Create basic pubspec.yaml
        pubspec_content = f"""name: {project_name.lower().replace('-', '_')}
description: A Flutter application generated by FlutterSwarm.

version: 1.0.0+1

environment:
  sdk: '>=3.0.0 <4.0.0'
  flutter: ">=3.0.0"

dependencies:
  flutter:
    sdk: flutter
  cupertino_icons: ^1.0.2

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^3.0.0

flutter:
  uses-material-design: true
"""
        
        with open(os.path.join(project_path, 'pubspec.yaml'), 'w') as f:
            f.write(pubspec_content)
        
        # Create basic main.dart
        main_dart_content = """import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;

  void _incrementCounter() {
    setState(() {
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text(widget.title),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            const Text(
              'You have pushed the button this many times:',
            ),
            Text(
              '$_counter',
              style: Theme.of(context).textTheme.headlineMedium,
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: const Icon(Icons.add),
      ),
    );
  }
}
"""
        
        with open(os.path.join(project_path, 'lib/main.dart'), 'w') as f:
            f.write(main_dart_content)
        
        print(f"✅ Basic Flutter project structure created at: {project_path}")
        return project_path
    
    def write_file(self, project_name: str, file_path: str, content: str) -> bool:
        """
        Write a file to the project directory.
        
        Args:
            project_name: Name of the project
            file_path: Relative path within the project (e.g., 'lib/main.dart')
            content: File content to write
            
        Returns:
            True if successful, False otherwise
        """
        project_path = self.get_project_path(project_name)
        full_file_path = os.path.join(project_path, file_path)
        
        try:
            # Ensure directory exists
            os.makedirs(os.path.dirname(full_file_path), exist_ok=True)
            
            # Write file
            with open(full_file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"✅ File written: {file_path}")
            return True
            
        except Exception as e:
            print(f"❌ Error writing file {file_path}: {e}")
            return False
    
    def write_project_files(self, project_name: str, files: Dict[str, str]) -> List[str]:
        """
        Write multiple files to a project.
        
        Args:
            project_name: Name of the project
            files: Dictionary mapping file paths to content
            
        Returns:
            List of successfully written file paths
        """
        if not self.project_exists(project_name):
            self.create_flutter_project_structure(project_name)
        
        written_files = []
        for file_path, content in files.items():
            if self.write_file(project_name, file_path, content):
                written_files.append(file_path)
        
        return written_files
    
    def list_projects(self) -> List[str]:
        """List all projects in the output directory."""
        if not os.path.exists(self.output_dir):
            return []
        
        projects = []
        for item in os.listdir(self.output_dir):
            project_path = os.path.join(self.output_dir, item)
            if os.path.isdir(project_path) and item != 'README.md':
                projects.append(item)
        
        return sorted(projects)
    
    def get_project_info(self, project_name: str) -> Optional[Dict]:
        """Get information about a project."""
        if not self.project_exists(project_name):
            return None
        
        project_path = self.get_project_path(project_name)
        pubspec_path = os.path.join(project_path, 'pubspec.yaml')
        
        info = {
            'name': project_name,
            'path': project_path,
            'exists': True,
            'has_pubspec': os.path.exists(pubspec_path)
        }
        
        # Get file count
        try:
            file_count = sum([len(files) for r, d, files in os.walk(project_path)])
            info['file_count'] = file_count
        except:
            info['file_count'] = 0
        
        return info
    
    def run_flutter_command(self, project_name: str, command: List[str]) -> subprocess.CompletedProcess:
        """
        Run a flutter command in the project directory.
        
        Args:
            project_name: Name of the project
            command: Flutter command to run (e.g., ['pub', 'get'])
            
        Returns:
            CompletedProcess result
        """
        project_path = self.get_project_path(project_name)
        
        if not self.project_exists(project_name):
            raise ValueError(f"Project '{project_name}' does not exist")
        
        full_command = [self.flutter_sdk_path] + command
        
        return subprocess.run(
            full_command,
            cwd=project_path,
            capture_output=True,
            text=True
        )
